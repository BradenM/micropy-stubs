
from typing import Any, Dict, Optional, Sequence, Tuple, Union
Node = Any
def set_debug(val: Any) -> None: ...
class PollEventLoop(EventLoop):
    def __init__(self, runq_len: smallint=, waitq_len: smallint=) -> None: ...
    def add_reader(self, sock: Any, cb: Any, *args) -> None: ...
    def remove_reader(self, sock: Any) -> None: ...
    def add_writer(self, sock: Any, cb: Any, *args) -> None: ...
    def remove_writer(self, sock: Any) -> None: ...
    def cancel_io(self, sock: Any) -> None: ...
    def wait(self, delay: Any) -> None: ...
class StreamReader:
    def __init__(self, polls: Any, ios: Any=) -> None: ...
    def read(self, n: int=-) -> Any: ...
        #   0: return res
        # ? 0: return res
    def readexactly(self, n: int) -> Any: ...
        #   0: return buf
        # ? 0: return buf
    def readline(self) -> Any: ...
        #   0: return buf
        # ? 0: return buf
    def aclose(self) -> None: ...
    def __repr__(self) -> Any: ...
        #   0: return %(self.polls, self.ios)
        # ? 0: return %Tuple[self.polls, self.ios]
class StreamWriter:
    def __init__(self, polls: Any, ios: Any=, extra: Any=) -> None: ...
    def awrite(self, buf: Any, off: Any=, sz: Any=-) -> None: ...
    def awritestr(self, s: str) -> None: ...
    def awriteiter(self, iterable: Any) -> None: ...
    def aclose(self) -> None: ...
    def get_extra_info(self, name: str, default: Any=) -> Any: ...
        #   0: return self.extra.get(name,default)
        # ? 0: return self.extra.get(str, default)
    def __repr__(self) -> Any: ...
        #   0: return %(self.polls, self.ios)
        # ? 0: return %Tuple[self.polls, self.ios]
def open_connection(host: Any, port: Any, ssl: Any=) -> Tuple[Any, Any, Any, Any]: ...
def start_server(client_coro: Any, host: Any, port: Any, backlog: Any=, ssl: Any=) -> None: ...
