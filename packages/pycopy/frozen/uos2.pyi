
from typing import Any, Dict, Optional, Sequence, Tuple, Union
Node = Any
def check_error(ret: Any, hide_eintr: Any=bool) -> bool: ...
def getcwd() -> Any: ...
    #   0: return _getcwd(buf,512)
    # ? 0: return _getcwd(buf, number)
def chdir(dir: Any) -> None: ...
def mkdir(name: str, mode: Any=511) -> None: ...
def rmdir(name: str) -> None: ...
def rename(old: Any, new: Any) -> None: ...
def unlink(name: str) -> None: ...
def access(path: Any, mode: Any) -> bool: ...
def utime(path: Any, times: Any) -> None: ...
def open(n: int, flags: Any, mode: Any=511) -> Any: ...
    #   0: return r
    # ? 0: return r
def read(fd: Any, n: int) -> bytes(buf[:r]): ...
def write(fd: Any, buf: Any) -> Any: ...
    #   0: return r
    # ? 0: return r
def lseek(fd: Any, pos: Any, how: Any) -> Any: ...
    #   0: return r
    # ? 0: return r
def close(fd: Any) -> Any: ...
    #   0: return r
    # ? 0: return r
def dup2(o: Any, n: int) -> Any: ...
    #   0: return r
    # ? 0: return r
def pipe() -> Tuple[str, str]: ...
def kill(pid: Any, sig: Any) -> None: ...
def fork() -> Any: ...
    #   0: return r
    # ? 0: return r
def waitpid(pid: Any, opts: Any) -> Tuple[Any, str]: ...
def execvp(f: Any, args: Any) -> None: ...
def system(c: Any) -> Any: ...
    #   0: return r
    # ? 0: return r
def getenv(var: Any, default: Any=None) -> Any: ...
    #   0: return default
    # ? 0: return default
    #   1: return var
    # ? 1: return var
def putenv(key: Any, value: Any) -> Any: ...
    #   0: return _putenv(key+'='+value)
    # ? 0: return _putenv(key+str+value)
