
from typing import Any, Dict, Optional, Sequence, Tuple, Union
Node = Any
class XMLSyntaxError(Exception): ...
class XMLTokenizer:
    def __init__(self, f: Any) -> None: ...
    def getch(self) -> Any: ...
        #   0: return c
        # ? 0: return c
    def eof(self) -> bool: ...
    def nextch(self) -> None: ...
    def skip_ws(self) -> None: ...
    def isident(self) -> Any: ...
        #   0: return self.c.isalpha()
        # ? 0: return self.c.isalpha()
    def getident(self) -> Any: ...
        #   0: return ident
        # ? 0: return ident
    def putnsident(self, res: Any) -> None: ...
    def match(self, c: Any) -> None: ...
    def expect(self, c: Any) -> None: ...
    def lex_attrs_till(self, res: Any) -> None: ...
    def tokenize(self) -> None: ...
def gfind(gen: Any, pred: Any) -> int: ...
def text_of(gen: Any, tag: Any) -> Optional[Union[Any, bool]]:
    #   0: return
    #   0: return 
    #   1: return t[]==tag[] and t[]==tag[]
    #   1: return bool
    #   2: return t[]==tag
    #   2: return bool
    #   3: return res[]
    # ? 3: return res[]
    def match_tag(t: Any) -> Optional[bool]: ...
def tokenize(file: Any) -> Any: ...
    #   0: return XMLTokenizer(file).tokenize()
    # ? 0: return XMLTokenizer(file).tokenize()
