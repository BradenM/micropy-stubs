
from typing import Any, Dict, Optional, Sequence, Tuple, Union
Node = Any
class ST7735R:
    def __init__(self, spi: Any, dc: Any, cs: Any, rst: Any=, width: Any=, height: Any=, ofx: Any=, ofy: Any=) -> None: ...
    def _block(self, x0: Any, y0: Any, x1: Any, y1: Any, data: Any=) -> Any: ...
        #   0: return self._read(self._RAM_READ,x1-x0+*y1-y0+*size)
        # ? 0: return self._read(self._RAM_READ, x1-x0+*y1-y0+*size)
    def _encode_pos(self, a: str, b: Any) -> Any: ...
        #   0: return ustruct.pack(self._ENCODE_POS,a,b)
        # ? 0: return ustruct.pack(self._ENCODE_POS, str, b)
    def _encode_pixel(self, color: Any) -> Any: ...
        #   0: return ustruct.pack(self._ENCODE_PIXEL,self.color565(color))
        # ? 0: return ustruct.pack(self._ENCODE_PIXEL, self.color565(color))
    def _decode_pixel(self, data: Any) -> Any: ...
        #   0: return color565(*ustruct.unpack(self._DECODE_PIXEL,data))
        # ? 0: return color565(*ustruct.unpack(self._DECODE_PIXEL, data))
    def pixel(self, x: Any, y: Any, color: Any=) -> Optional[Any]: ...
        #   0: return self._decode_pixel(self._block(x,y,x,y))
        # ? 0: return self._decode_pixel(self._block(x, y, x, y))
        #   1: return
        #   1: return
    def fill_rectangle(self, x: Any, y: Any, width: Any, height: Any, color: Any, N: Any=) -> None: ...
    def fill(self, color: Any=, N: Any=) -> None: ...
    def hline(self, x: Any, y: Any, width: Any, color: Any, N: Any=) -> None: ...
    def vline(self, x: Any, y: Any, height: Any, color: Any, N: Any=) -> None: ...
    def blit_buffer(self, buffer: Any, x: Any, y: Any, width: Any, height: Any) -> None: ...
    def reset(self) -> None: ...
    def _write(self, command: Any=, data: Any=) -> None: ...
    def _read(self, command: Any=, count: Any=) -> Any: ...
        #   0: return data
        # ? 0: return data
    def color565(self, r: Any, g: Any=, b: Any=) -> Any: ...
        #   0: return r&<<|g&<<|b>>
        # ? 0: return r&<<|g&<<|b>>
