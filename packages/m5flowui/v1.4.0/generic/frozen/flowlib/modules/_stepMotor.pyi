
from typing import Any, Dict, Optional, Sequence, Tuple, Union
Node = Any
class StepMotor:
    def __init__(self, addr: Any=112, i2c: Any=None) -> None: ...
    def _available(self) -> None: ...
    def turn(self, x: Any=0, y: Any=0, z: Any=0, speed: Any=None) -> None: ...
    def g_code(self, code: Any) -> Any: ...
        #   0: return time
        # ? 0: return time
    def set_mode(self, mode: Any) -> None: ...
    def get_code_time(self, g_code: Any) -> int: ...
    def grbl_init(self, x_step: Any=None, y_step: Any=None, z_step: Any=None, acc: Any=None) -> None: ...
    def read_clean(self) -> None: ...
    def read_line(self) -> Any: ...
        #   0: return i2c_data[:-1]
        # ? 0: return i2c_data[:number]
    def read_idle(self) -> bool: ...
    def wait_idle(self) -> None: ...
    def lock_motor(self) -> None: ...
    def unlock_motor(self) -> None: ...
    def deinit(self) -> None: ...
