
from typing import Any, Dict, Optional, Sequence, Tuple, Union
Node = Any
class Color:
    def __init__(self, port: Any, address: Any=41) -> None: ...
    def _available(self) -> None: ...
    def rawData(self) -> Any: ...
        #   0: return self._raw
        # ? 0: return self._raw
    def red(self) -> int: ...
    def green(self) -> int: ...
    def blue(self) -> int: ...
    def getRGB(self) -> Union[Tuple[Any, int, Any], Tuple[Any, number, Any]]: ...
    def setIntegrationTime(self, it: Any) -> None: ...
    def setGains(self, gain: Any) -> None: ...
    def enable(self) -> None: ...
    def _valid(self) -> bool(self._read_u8(_REGISTER_STATUS)&number): ...
    def _register_char(self, register: Any, value: Any=None, buf: Any=bytearray(1)) -> Any: ...
        #   0: return buf[0]
        # ? 0: return buf[number]
        #   1: return self.i2c.writeto_mem(self.addr,register,buf)
        # ? 1: return self.i2c.writeto_mem(self.addr, register, buf)
    def _register_short(self, register: Any, value: Any=None, buf: Any=bytearray(2)) -> Any: ...
        #   0: return buf[1]*256+buf[0]
        # ? 0: return buf[number]*number+buf[number]
        #   1: return self.i2c.writeto_mem(self.addr,register,buf)
        # ? 1: return self.i2c.writeto_mem(self.addr, register, buf)
    def _read_u8(self, address: Any) -> Any: ...
        #   0: return self._register_char(_COMMAND_BIT|address)
        # ? 0: return self._register_char(_COMMAND_BIT|address)
    def _read_u16(self, address: Any) -> Any: ...
        #   0: return self._register_short(_COMMAND_BIT|address)
        # ? 0: return self._register_short(_COMMAND_BIT|address)
    def _write_u8(self, address: Any, val: Any) -> Any: ...
        #   0: return self._register_char(_COMMAND_BIT|address,value=val)
        # ? 0: return self._register_char(_COMMAND_BIT|address, value=val)
    def _write_u16(self, address: Any, val: Any) -> Any: ...
        #   0: return self._register_short(_COMMAND_BIT|address,value=val)
        # ? 0: return self._register_short(_COMMAND_BIT|address, value=val)
    def deinit(self) -> None: ...
