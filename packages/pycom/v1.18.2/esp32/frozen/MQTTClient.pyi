
from typing import Any, Dict, Optional, Sequence, Tuple, Union
Node = Any
class MQTTMessage:
    def __init__(self) -> None: ...
class MQTTClient:
    def __init__(self, clientID: Any, cleanSession: Any, protocol: Any) -> None: ...
    def getClientID(self) -> Any: ...
        #   0: return self.client_id
        # ? 0: return self.client_id
    def configEndpoint(self, srcHost: Any, srcPort: Any) -> None: ...
    def configCredentials(self, srcCAFile: Any, srcKey: Any, srcCert: Any) -> None: ...
    def setConnectDisconnectTimeoutSecond(self, srcConnectDisconnectTimeout: Any) -> None: ...
    def setMQTTOperationTimeoutSecond(self, srcMQTTOperationTimeout: Any) -> None: ...
    def clearLastWill(self) -> None: ...
    def setLastWill(self, topic: Any, payload: Any=None, QoS: Any=0, retain: Any=bool) -> None: ...
    def configIAMCredentials(self, srcAWSAccessKeyID: Any, srcAWSSecretAccessKey: Any, srcAWSSessionToken: Any) -> None: ...
    def setOfflinePublishQueueing(self, srcQueueSize: Any, srcDropBehavior: Any) -> None: ...
    def setDrainingIntervalSecond(self, srcDrainingIntervalSecond: Any) -> None: ...
    def setBackoffTiming(self, srcBaseReconnectTimeSecond: Any, srcMaximumReconnectTimeSecond: Any, srcMinimumConnectTimeSecond: Any) -> None: ...
    def connect(self, keepAliveInterval: Any=30) -> bool: ...
    def subscribe(self, topic: Any, qos: Any, callback: Any) -> bool: ...
    def publish(self, topic: Any, payload: Any, qos: Any, retain: Any, dup: Any=bool) -> None: ...
    def _encode_16(self, x: Any) -> Any: ...
        #   0: return struct.pack('!H',x)
        # ? 0: return struct.pack(str, x)
    def _pascal_string(self, s: str) -> Any: ...
        #   0: return struct.pack('!H',len(s))+s
        # ? 0: return struct.pack(str, int)+str
    def _encode_varlen_length(self, length: Any) -> Any: ...
        #   0: return buff
        # ? 0: return buff
    def _topic_matches_sub(self, sub: Any, topic: Any) -> Union[Any, bool]: ...
        #   0: return bool
        #   0: return bool
        #   1: return result
        # ? 1: return result
    def _remove_topic_callback(self, topic: Any) -> Any: ...
        #   0: return deleted
        # ? 0: return deleted
    def unsubscribe(self, topic: Any) -> Union[Any, bool]: ...
        #   0: return self._remove_topic_callback(topic)
        # ? 0: return self._remove_topic_callback(topic)
        #   1: return bool
        #   1: return bool
    def disconnect(self) -> bool: ...
    def _send_connect(self, keepalive: Any, clean_session: Any) -> Any: ...
        #   0: return self._msgHandler.priority_send(pkt)
        # ? 0: return self._msgHandler.priority_send(pkt)
    def _send_unsubscribe(self, topic: Any, dup: Any=bool) -> Any: ...
        #   0: return self._msgHandler.push_on_send_queue(pkt)
        # ? 0: return self._msgHandler.push_on_send_queue(pkt)
    def _send_puback(self, msg_id: Any) -> Any: ...
        #   0: return self._msgHandler.push_on_send_queue(pkt)
        # ? 0: return self._msgHandler.push_on_send_queue(pkt)
    def _send_pubrec(self, msg_id: Any) -> Any: ...
        #   0: return self._msgHandler.push_on_send_queue(pkt)
        # ? 0: return self._msgHandler.push_on_send_queue(pkt)
    def _parse_connack(self, payload: Any) -> bool: ...
    def _parse_suback(self, payload: Any) -> bool: ...
    def _parse_puback(self, payload: Any) -> bool: ...
    def _notify_message(self, message: Any) -> Any: ...
        #   0: return notified
        # ? 0: return notified
    def _parse_publish(self, cmd: Any, packet: Any) -> bool: ...
    def _parse_unsuback(self, payload: Any) -> bool: ...
    def _parse_pingresp(self) -> bool: ...
    def _recv_callback(self, cmd: Any, payload: Any) -> Union[Any, bool]: ...
        #   0: return self._parse_connack(payload)
        # ? 0: return self._parse_connack(payload)
        #   1: return self._parse_suback(payload)
        # ? 1: return self._parse_suback(payload)
        #   2: return self._parse_puback(payload)
        # ? 2: return self._parse_puback(payload)
        #   3: return self._parse_publish(cmd,payload)
        # ? 3: return self._parse_publish(cmd, payload)
        #   4: return self._parse_unsuback(payload)
        # ? 4: return self._parse_unsuback(payload)
        #   5: return self._parse_pingresp()
        # ? 5: return self._parse_pingresp()
        #   6: return bool
        #   6: return bool
    def insertShadowCallback(self, callback: Any, payload: Any, status: Any, token: Any) -> None: ...
