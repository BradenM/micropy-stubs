# make_stub_files: Mon 02 Sep 2019 at 04:45:27

from typing import Any, Dict, Optional, Sequence, Tuple, Union
Node = Any
class AWSIoTMQTTClient:
    def __init__(self, clientID: Any, protocolType: Any=mqttConst.MQTTv3_1_1, useWebsocket: Any=bool, cleanSession: Any=bool) -> None: ...
    def configureLastWill(self, topic: Any, payload: Any, QoS: Any) -> None: ...
    def clearLastWill(self) -> None: ...
    def configureEndpoint(self, hostName: Any, portNumber: Any) -> None: ...
    def configureIAMCredentials(self, AWSAccessKeyID: Any, AWSSecretAccessKey: Any, AWSSessionToken: Any='') -> None: ...
    def configureCredentials(self, CAFilePath: Any, KeyPath: Any='', CertificatePath: Any='') -> None: ...
    def configureAutoReconnectBackoffTime(self, baseReconnectQuietTimeSecond: Any, maxReconnectQuietTimeSecond: Any, stableConnectionTimeSecond: Any) -> None: ...
    def configureOfflinePublishQueueing(self, queueSize: Any, dropBehavior: Any=mqttConst.DROP_NEWEST) -> None: ...
    def configureDrainingFrequency(self, frequencyInHz: Any) -> None: ...
    def configureConnectDisconnectTimeout(self, timeoutSecond: Any) -> None: ...
    def configureMQTTOperationTimeout(self, timeoutSecond: Any) -> None: ...
    def connect(self, keepAliveIntervalSecond: Any=30) -> Any: ...
        #   0: return self._mqttClient.connect(keepAliveIntervalSecond)
        # ? 0: return self._mqttClient.connect(keepAliveIntervalSecond)
    def disconnect(self) -> Any: ...
        #   0: return self._mqttClient.disconnect()
        # ? 0: return self._mqttClient.disconnect()
    def publish(self, topic: Any, payload: Any, QoS: Any) -> Any: ...
        #   0: return self._mqttClient.publish(topic,payload,QoS,bool)
        # ? 0: return self._mqttClient.publish(topic, payload, QoS, bool)
    def subscribe(self, topic: Any, QoS: Any, callback: Any) -> Any: ...
        #   0: return self._mqttClient.subscribe(topic,QoS,callback)
        # ? 0: return self._mqttClient.subscribe(topic, QoS, callback)
    def unsubscribe(self, topic: Any) -> Any: ...
        #   0: return self._mqttClient.unsubscribe(topic)
        # ? 0: return self._mqttClient.unsubscribe(topic)
class AWSIoTMQTTShadowClient:
    def __init__(self, clientID: Any, protocolType: Any=mqttConst.MQTTv3_1_1, useWebsocket: Any=bool, cleanSession: Any=bool) -> None: ...
    def configureLastWill(self, topic: Any, payload: Any, QoS: Any) -> None: ...
    def clearLastWill(self) -> None: ...
    def configureEndpoint(self, hostName: Any, portNumber: Any) -> None: ...
    def configureIAMCredentials(self, AWSAccessKeyID: Any, AWSSecretAccessKey: Any, AWSSTSToken: Any='') -> None: ...
    def configureCredentials(self, CAFilePath: Any, KeyPath: Any='', CertificatePath: Any='') -> None: ...
    def configureAutoReconnectBackoffTime(self, baseReconnectQuietTimeSecond: Any, maxReconnectQuietTimeSecond: Any, stableConnectionTimeSecond: Any) -> None: ...
    def configureConnectDisconnectTimeout(self, timeoutSecond: Any) -> None: ...
    def configureMQTTOperationTimeout(self, timeoutSecond: Any) -> None: ...
    def connect(self, keepAliveIntervalSecond: Any=30) -> Any: ...
        #   0: return self._AWSIoTMQTTClient.connect(keepAliveIntervalSecond)
        # ? 0: return self._AWSIoTMQTTClient.connect(keepAliveIntervalSecond)
    def disconnect(self) -> Any: ...
        #   0: return self._AWSIoTMQTTClient.disconnect()
        # ? 0: return self._AWSIoTMQTTClient.disconnect()
    def createShadowHandlerWithName(self, shadowName: Any, isPersistentSubscribe: Any) -> Any: ...
        #   0: return deviceShadow.deviceShadow(shadowName,isPersistentSubscribe,self._shadowManager)
        # ? 0: return deviceShadow.deviceShadow(shadowName, isPersistentSubscribe, self._shadowManager)
    def getMQTTConnection(self) -> Any: ...
        #   0: return self._AWSIoTMQTTClient
        # ? 0: return self._AWSIoTMQTTClient
