
from typing import Any, Dict, Optional, Sequence, Tuple, Union
Node = Any
class shadowManager:
    def __init__(self, MQTTClient: Any) -> None: ...
    def getClientID(self) -> Any: ...
        #   0: return self._mqttClient.getClientID()
        # ? 0: return self._mqttClient.getClientID()
    def _getDeltaTopic(self, shadowName: Any) -> str: ...
    def _getNonDeltaTopics(self, shadowName: Any, actionName: Any) -> Tuple[Any, Any, Any]: ...
    def shadowPublish(self, shadowName: Any, shadowAction: Any, payload: Any) -> None: ...
    def shadowSubscribe(self, shadowName: Any, shadowAction: Any, callback: Any) -> None: ...
    def shadowUnsubscribe(self, srcShadowName: Any, srcShadowAction: Any) -> None: ...
    def insertShadowCallback(self, callback: Any, payload: Any, status: Any, token: Any) -> None: ...
