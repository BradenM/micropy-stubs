# make_stub_files: Fri 26 Jul 2019 at 02:36:14

from typing import Any, Dict, Optional, Sequence, Tuple, Union
Node = Any
def reconnect_uart() -> None: ...
def reconnect_uart() -> None: ...
class sqnsupgrade:
    def __init__(self) -> None: ...
    def special_print(self, msg: Any, flush: Any=None, end: Any='\n') -> None: ...
    def read_rsp(self, size: Any=None, timeout: Any=-1) -> Union[Any, bytes]: ...
        #   0: return rsp
        # ? 0: return rsp
        #   1: return b''
        #   1: return bytes
    def print_pretty_response(self, rsp: Any, flush: Any=bool) -> None: ...
    def return_pretty_response(self, rsp: Any) -> Any: ...
        #   0: return ret_str
        # ? 0: return ret_str
    def return_upgrade_response(self, rsp: Any) -> Optional[Any]: ...
        #   0: return pretty.split(':')[1].strip()
        # ? 0: return pretty.split(str)[number].strip()
        #   1: return None
        #   1: return None
    def return_code(self, rsp: Any, debug: Any=bool) -> int: ...
    def wait_for_modem(self, send: Any=bool, expected: Any=b'OK', echo_char: smallint=None) -> None: ...
    def __check_file(self, file_path: Any, debug: Any=bool) -> bool: ...
    def check_files(self, ffile: Any, mfile: Any=None, debug: Any=bool) -> Union[Any, bool]: ...
        #   0: return self.__check_file(ffile,debug)
        # ? 0: return self.__check_file(ffile, debug)
        #   1: return bool
        #   1: return bool
        #   2: return self.__check_file(ffile,debug)
        # ? 2: return self.__check_file(ffile, debug)
    def __check_resp(self, resp: Any, kill_ppp: Any=bool) -> None: ...
    def __hangup_modem(self, delay: Any, debug: Any) -> bool: ...
    def detect_modem_state(self, retry: Any=3, initial_delay: Any=1000, debug: Any=bool) -> Optional[Any]: ...
        #   0: return self.return_code(resp,debug)
        # ? 0: return self.return_code(resp, debug)
        #   1: return self.return_code(resp,debug)
        # ? 1: return self.return_code(resp, debug)
        #   2: return self.return_code(resp,debug)
        # ? 2: return self.return_code(resp, debug)
        #   3: return self.return_code(resp,debug)
        # ? 3: return self.return_code(resp, debug)
        #   4: return self.return_code(resp,debug)
        # ? 4: return self.return_code(resp, debug)
        #   5: return None
        #   5: return None
    def __get_power_warning(self) -> str: ...
    def __get_wait_msg(self, load_fff: Any=bool) -> Optional[str]: ...
    def __run(self, file_path: Any=None, baudrate: smallint=921600, port: Any=None, resume: Any=bool, load_ffh: Any=bool, mirror: Any=bool, switch_ffh: Any=bool, bootrom: Any=bool, rgbled: Any=328965, debug: Any=bool, pkgdebug: Any=bool, atneg: Any=bool, max_try: Any=10, direct: Any=bool, atneg_only: Any=bool, version_only: Any=bool, expected_smod: Any=None, verbose: Any=bool, load_fff: Any=bool) -> bool: ...
    def __check_br(self, br_only: Any=bool, verbose: Any=bool, debug: Any=bool) -> Optional[bool]: ...
    def wakeup_modem(self, baudrate: smallint, port: Any, max_try: Any, delay: Any, debug: Any, msg: Any='Attempting AT wakeup...') -> bool: ...
    def at_negotiation(self, baudrate: smallint, port: Any, max_try: Any, mirror: Any, atneg_only: Any, debug: Any) -> bool: ...
    def uart_mirror(self, color: Any) -> None: ...
    def success_message(self, port: Any=None, verbose: Any=bool, debug: Any=bool) -> None: ...
    def upgrade(self, ffile: Any, mfile: Any=None, baudrate: smallint=921600, retry: Any=bool, resume: Any=bool, debug: Any=bool, pkgdebug: Any=bool, verbose: Any=bool, load_fff: Any=bool) -> None: ...
    def upgrade_uart(self, ffh_mode: Any=bool, mfile: Any=None, retry: Any=bool, resume: Any=bool, color: Any=328965, debug: Any=bool, pkgdebug: Any=bool, verbose: Any=bool, load_fff: Any=bool) -> None: ...
    def show_version(self, port: Any=None, debug: Any=bool, verbose: Any=bool) -> None: ...
    def upgrade_ext(self, port: Any, ffile: Any, mfile: Any, resume: Any=bool, debug: Any=bool, pkgdebug: Any=bool, verbose: Any=bool, load_fff: Any=bool) -> None: ...
def detect_error() -> None: ...
def print_welcome() -> None: ...
def run(ffile: Any, mfile: Any=None, baudrate: smallint=921600, verbose: Any=bool, debug: Any=bool, load_fff: Any=bool) -> None: ...
def uart(ffh_mode: Any=bool, mfile: Any=None, color: Any=328965, verbose: Any=bool, debug: Any=bool) -> None: ...
def info(verbose: Any=bool, debug: Any=bool, retry: Any=5) -> None: ...
def run(port: Any, ffile: Any, mfile: Any=None, resume: Any=bool, debug: Any=bool, verbose: Any=bool, load_fff: Any=bool) -> None: ...
def version(port: Any, verbose: Any=bool, debug: Any=bool) -> None: ...
