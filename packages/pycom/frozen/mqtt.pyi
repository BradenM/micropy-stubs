
from typing import Any, Dict, Optional, Sequence, Tuple, Union
Node = Any
class MQTTException(Exception): ...
class MQTTClient:
    def __init__(self, client_id: Any, server: Any, port: Any=, user: Any=, password: Any=, keepalive: Any=, ssl: Any=, ssl_params: Any={}) -> None: ...
    def _send_str(self, s: str) -> None: ...
    def _recv_len(self) -> int: ...
    def set_callback(self, f: Any) -> None: ...
    def set_last_will(self, topic: Any, msg: Any, retain: Any=, qos: Any=) -> None: ...
    def connect(self, clean_session: Any=) -> Any: ...
        #   0: return resp[]&
        # ? 0: return resp[]&
    def disconnect(self) -> None: ...
    def ping(self) -> None: ...
    def publish(self, topic: Any, msg: Any, retain: Any=, qos: Any=) -> None: ...
    def subscribe(self, topic: Any, qos: Any=) -> None: ...
    def wait_msg(self) -> Optional[Any]: ...
        #   0: return
        #   0: return 
        #   1: return
        #   1: return 
        #   2: return op
        # ? 2: return op
    def check_msg(self) -> Any: ...
        #   0: return self.wait_msg()
        # ? 0: return self.wait_msg()
