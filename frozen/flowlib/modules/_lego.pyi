
from typing import Any, Dict, Optional, Sequence, Tuple, Union
Node = Any
def dead_area(amt: Any, low: Any, low_up: Any, high: Any, high_up: Any) -> Any: ...
    #   0: return amt
    # ? 0: return amt
def constrain(amt: Any, low: Any, high: Any) -> Any: ...
    #   0: return low
    # ? 0: return low
    #   1: return high
    # ? 1: return high
    #   2: return amt
    # ? 2: return amt
class Lego_Motor:
    def __init__(self, port: Any) -> None: ...
    def _available(self) -> None: ...
    def stop(self) -> None: ...
    def set_pwm(self, pwm: Any) -> None: ...
    def read_encoder(self) -> Any: ...
        #   0: return self._position
        # ? 0: return self._position
    def _read_encoder(self) -> Any: ...
        #   0: return encoder_buf[0]
        # ? 0: return encoder_buf[number]
        #   1: return encoder_buf[1]
        # ? 1: return encoder_buf[number]
    def position_update(self) -> None: ...
    def run_to(self, pos: Any, speed: Any) -> None: ...
    def run_distance(self, distance: Any=500, speed: Any=255) -> None: ...
    def deinit(self) -> None: ...
class Lego:
    def __init__(self) -> None: ...
    def deinit(self) -> None: ...
