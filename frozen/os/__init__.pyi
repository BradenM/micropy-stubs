
from typing import Any, Dict, Optional, Sequence, Tuple, Union
Node = Any
def raise_error() -> None: ...
class stat_result:
    def __init__(self, st: Any) -> None: ...
    def __getitem__(self, i: int) -> Any: ...
        #   0: return self.st[i]
        # ? 0: return self.st[int]
def stat(name: str) -> Any: ...
    #   0: return stat_result(uos.stat(name))
    # ? 0: return stat_result(uos.stat(str))
def lstat(name: str) -> Any: ...
    #   0: return stat_result(uos.stat(name,bool))
    # ? 0: return stat_result(uos.stat(str, bool))
def makedirs(name: str, mode: Any=511, exist_ok: Any=bool) -> None: ...
def ilistdir(path: Any='.') -> None: ...
def listdir(path: Any='.') -> Any: ...
    #   0: return res
    # ? 0: return res
def walk(top: Any, topdown: Any=bool) -> None: ...
def dup(fd: Any) -> Any: ...
    #   0: return r
    # ? 0: return r
def WIFSIGNALED(st: Any) -> bool: ...
def WIFEXITED(st: Any) -> bool: ...
def WEXITSTATUS(st: Any) -> Any: ...
    #   0: return st>>8
    # ? 0: return st>>number
def WTERMSIG(st: Any) -> Any: ...
    #   0: return st&127
    # ? 0: return st&number
def fsencode(s: str) -> Union[bytes(str, str), str]: ...
def fsdecode(s: str) -> Union[str, str(str, str)]: ...
def urandom(n: int) -> Any: ...
    #   0: return f.read(n)
    # ? 0: return f.read(int)
def popen(cmd: Any, mode: Any='r') -> Any: ...
    #   0: return builtins.open(i,mode)
    # ? 0: return builtins.open(int, mode)
def execvpe(f: Any, args: Any, env: Any) -> None: ...
def spawnvp(mode: Any, file: Any, args: Any) -> Any: ...
    #   0: return pid
    # ? 0: return pid
    #   1: return rc>>8
    # ? 1: return rc>>number
    #   2: return -sig
    # ? 2: return sig
def closerange(low: Any, high: Any) -> None: ...
def fpathconf(fd: Any, name: str) -> number: ...
    def __init__(self) -> None: ...
    def __setitem__(self, k: Any, v: Any) -> None: ...
