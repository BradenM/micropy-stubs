
from typing import Any, Dict, Optional, Sequence, Tuple, Union
Node = Any
def crc16(s: str) -> Any: ...
    #   0: return crc
    # ? 0: return crc
def usleep(x: Any) -> None: ...
def hexdump(src: Any, length: Any=) -> None: ...
class MException(BaseException):
    def __init__(self, s: str) -> None: ...
    def __str__(self) -> Any: ...
        #   0: return self.s
        # ? 0: return self.s
class SerialDev(object):
    def __init__(self, serial: Any, baud: Any, timeout: Any=) -> None: ...
    def read(self, n: int) -> Any: ...
        #   0: return r
        # ? 0: return r
    def write(self, s: str) -> None: ...
    def devastate(self) -> None: ...
    def close(self) -> None: ...
    def set_timeout(self, timeout: Any) -> None: ...
class Master:
    def __init__(self, dev: Any, debug: Any=, pkgdebug: Any=) -> None: ...
    def mreq_ack(op: Any) -> Any: ...
        #   0: return op|
        # ? 0: return op|
    def wipe(self) -> None: ...
    def read(self, n: int) -> Any: ...
        #   0: return r
        # ? 0: return r
    def write(self, s: str) -> None: ...
    def make_mreq(self, op: Any, pld: Any) -> Any: ...
        #   0: return struct.pack(self.MREQH,self.MREQ_SIGNATURE,op,self.sid,len(pld),self.tid,hcrc,pcrc)
        # ? 0: return struct.pack(self.MREQH, self.MREQ_SIGNATURE, op, self.sid, int, self.tid, hcrc, pcrc)
    def decode_srsp(self, p: Any, show: Any=) -> Dict[Any, Any, Any, Any, Any]: ...
    def verify_srsp_data(self, p: Any, plen: Any, pcrc: Any) -> None: ...
    def verify_session(self, i: int, op: Any) -> None: ...
    def decode_open_session(self, p: Any) -> None: ...
    def reset(self, closing: Any=) -> None: ...
    def open_session(self) -> None: ...
    def send_data(self, blobfile: Any, filesize: Any, trials: Any=, bootrom: Any=) -> None: ...
        class Trial:
            def __init__(self, trials: Any) -> None: ...
            def need_retry(self, c: Any, *a, **k) -> None: ...
    def progress(self, what: Any, downloaded: Any, total: Any, barLen: Any=) -> None: ...
    def progressComplete(self) -> None: ...
class args(object): ...
def start(elf: Any, elfsize: Any, serial: Any, baud: Any=, retry: Any=, debug: Any=, AT: Any=, pkgdebug: Any=) -> None: ...
