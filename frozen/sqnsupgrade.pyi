
from typing import Any, Dict, Optional, Sequence, Tuple, Union
Node = Any
def reconnect_uart() -> None: ...
def reconnect_uart() -> None: ...
class sqnsupgrade:
    def __init__(self) -> None: ...
    def special_print(self, msg: Any, flush: Any=, end: Any=) -> None: ...
    def read_rsp(self, size: Any=, timeout: Any=-) -> Optional[Any]: ...
        #   0: return rsp
        # ? 0: return rsp
        #   1: return
        #   1: return
    def print_pretty_response(self, rsp: Any, flush: Any=) -> None: ...
    def return_pretty_response(self, rsp: Any) -> Any: ...
        #   0: return ret_str
        # ? 0: return ret_str
    def return_upgrade_response(self, rsp: Any) -> Optional[Any]: ...
        #   0: return pretty.split()[].strip()
        # ? 0: return pretty.split()[].strip()
        #   1: return
        #   1: return
    def return_code(self, rsp: Any, debug: Any=) -> int: ...
    def wait_for_modem(self, send: Any=, expected: Any=, echo_char: smallint=) -> None: ...
    def __check_file(self, file_path: Any, debug: Any=) -> None: ...
    def check_files(self, ffile: Any, mfile: Any=, debug: Any=) -> Optional[Any]: ...
        #   0: return self.__check_file(ffile,debug)
        # ? 0: return self.__check_file(ffile, debug)
        #   1: return
        #   1: return 
        #   2: return self.__check_file(ffile,debug)
        # ? 2: return self.__check_file(ffile, debug)
    def __check_resp(self, resp: Any, kill_ppp: Any=) -> None: ...
    def __hangup_modem(self, delay: Any, debug: Any) -> None: ...
    def detect_modem_state(self, retry: Any=, initial_delay: Any=, debug: Any=) -> Optional[Any]: ...
        #   0: return self.return_code(resp,debug)
        # ? 0: return self.return_code(resp, debug)
        #   1: return self.return_code(resp,debug)
        # ? 1: return self.return_code(resp, debug)
        #   2: return self.return_code(resp,debug)
        # ? 2: return self.return_code(resp, debug)
        #   3: return self.return_code(resp,debug)
        # ? 3: return self.return_code(resp, debug)
        #   4: return self.return_code(resp,debug)
        # ? 4: return self.return_code(resp, debug)
        #   5: return
        #   5: return
    def __get_power_warning(self) -> None: ...
    def __get_wait_msg(self, load_fff: Any=) -> Optional[Any]: ...
        #   0: return +self.__get_power_warning()
        # ? 0: return +self.__get_power_warning()
        #   1: return +self.__get_power_warning()
        # ? 1: return +self.__get_power_warning()
        #   2: return
        #   2: return
    def __run(self, file_path: Any=, baudrate: smallint=, port: Any=, resume: Any=, load_ffh: Any=, mirror: Any=, switch_ffh: Any=, bootrom: Any=, rgbled: Any=, debug: Any=, pkgdebug: Any=, atneg: Any=, max_try: Any=, direct: Any=, atneg_only: Any=, version_only: Any=, expected_smod: Any=, verbose: Any=, load_fff: Any=) -> None: ...
    def __check_br(self, br_only: Any=, verbose: Any=, debug: Any=) -> None: ...
    def wakeup_modem(self, baudrate: smallint, port: Any, max_try: Any, delay: Any, debug: Any, msg: Any=) -> bool: ...
    def at_negotiation(self, baudrate: smallint, port: Any, max_try: Any, mirror: Any, atneg_only: Any, debug: Any) -> None: ...
    def uart_mirror(self, color: Any) -> None: ...
    def success_message(self, port: Any=, verbose: Any=, debug: Any=) -> None: ...
    def upgrade(self, ffile: Any, mfile: Any=, baudrate: smallint=, retry: Any=, resume: Any=, debug: Any=, pkgdebug: Any=, verbose: Any=, load_fff: Any=) -> None: ...
    def upgrade_uart(self, ffh_mode: Any=, mfile: Any=, retry: Any=, resume: Any=, color: Any=, debug: Any=, pkgdebug: Any=, verbose: Any=, load_fff: Any=) -> None: ...
    def show_version(self, port: Any=, debug: Any=, verbose: Any=) -> None: ...
    def upgrade_ext(self, port: Any, ffile: Any, mfile: Any, resume: Any=, debug: Any=, pkgdebug: Any=, verbose: Any=, load_fff: Any=) -> None: ...
def detect_error() -> None: ...
def print_welcome() -> None: ...
def run(ffile: Any, mfile: Any=, baudrate: smallint=, verbose: Any=, debug: Any=, load_fff: Any=) -> None: ...
def uart(ffh_mode: Any=, mfile: Any=, color: Any=, verbose: Any=, debug: Any=) -> None: ...
def info(verbose: Any=, debug: Any=, retry: Any=) -> None: ...
def run(port: Any, ffile: Any, mfile: Any=, resume: Any=, debug: Any=, verbose: Any=, load_fff: Any=) -> None: ...
def version(port: Any, verbose: Any=, debug: Any=) -> None: ...
