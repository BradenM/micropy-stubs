
from typing import Any, Dict, Optional, Sequence, Tuple, Union
Node = Any
class Loramesh:
    def __init__(self, lora: Any=None) -> None: ...
    def _state_update(self) -> Any: ...
        #   0: return self.state
        # ? 0: return self.state
    def _rloc_ip_net_addr(self) -> Any: ...
        #   0: return self.net_addr
        # ? 0: return self.net_addr
    def _update_ips(self) -> None: ...
    def is_connected(self) -> Any: ...
        #   0: return connected
        # ? 0: return connected
    def led_state(self) -> None: ...
    def ip(self, prefix: Any=None) -> Optional[Any]: ...
        #   0: return self.ip_eid
        # ? 0: return self.ip_eid
        #   1: return ip
        # ? 1: return ip
        #   2: return None
        #   2: return None
    def neighbors(self) -> Any: ...
        #   0: return self.mesh.neighbors()
        # ? 0: return self.mesh.neighbors()
    def neighbors_ip(self) -> Any: ...
        #   0: return nei_list
        # ? 0: return nei_list
    def ipaddr(self) -> Any: ...
        #   0: return self.mesh.ipaddr()
        # ? 0: return self.mesh.ipaddr()
    def cli(self, command: Any) -> Any: ...
        #   0: return self.mesh.cli(command)
        # ? 0: return self.mesh.cli(command)
    def ping(self, ip: Any) -> Any: ...
        #   0: return ret_time
        # ? 0: return ret_time
    def blink(self, num: Any=3, period: Any=0.5, color: Any=None) -> None: ...
